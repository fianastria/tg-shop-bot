import sqlite3

from aiogram import Router, F

from aiogram import types, Bot
from aiogram.filters.command import Command
from keyboards import kbs

from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from aiogram.exceptions import TelegramRetryAfter
from time import sleep

from config_reader import config
from handlers import pre_sales_handler, sales_handler, admin_handler


router = Router()

with sqlite3.connect("main.db") as connection:
    c = connection.cursor()
    print(c.execute("SELECT * FROM admins").fetchall())

#admins(tg_id, name)
photo1 = config.photo1
photo2 = config.photo2

greetings_text = '''\
–ø—Ä–∏–≤–µ—Ç !!
—è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –º–µ—Ä—á –∞–≤—Ç–æ—Ä–∞ milisu üéÄ

—Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?'''




#@router.message(F.text == "yogetme")
#async def admin(message: types.Message):
    #id = message.from_user.id
    #name = message.from_user.first_name
    #with sqlite3.connect("main.db") as connection:
        #c = connection.cursor()
        #c.execute(f"INSERT INTO admins VALUES({id}, '{name}')")
        #print(c.fetchone(), "done")

#@router.message(F.photo)
#async def photos(message: types.Message):
    #print(message.photo[-1].file_id)




async def saving_func(user_id, ms_cb, state):
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute('SELECT name FROM sqlite_master WHERE type="table" AND name LIKE "pay%" ORDER BY name')
        temp = c.fetchall()
        for i in temp:
            if str(user_id) in i[0]:
                await ms_cb(
                    text='''\
    ‚ö†Ô∏è –≤–Ω–∏–º–∞–Ω–∏–µ, –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, —á—Ç–æ –≤–∞—à –∑–∞–∫–∞–∑ —É—Ç–µ—Ä—è–Ω ‚ö†Ô∏è

    –µ—Å–ª–∏ –≤—ã —É–∂–µ –°–û–í–ï–†–®–ò–õ–ò –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"

    –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, –æ–Ω —Ä–µ—à–∏—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É ‚Äî> @milisuuuu

    –µ—Å–ª–∏ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–æ—Ç–º–µ–Ω–∏—Ç—å"''',
                    reply_markup=kbs.save()
                )
                await state.set_state(pre_sales_handler.Pre_CLientSaver.need_help)

                return
                #—Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –≤–Ω–∏–∑—É
        
        c.execute(f'''DROP TABLE IF EXISTS pre_basket_{user_id}''')
        c.execute(f'''DROP TABLE IF EXISTS pre_page_{user_id}''')

def pre_a_code(id):
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute('SELECT name FROM sqlite_master WHERE type="table"')
        temp = c.fetchall()
        c.execute(f'SELECT 1 FROM pre_sales_data WHERE id = {id} AND shipping = "–ê–≤–∏—Ç–æ"')
        is_a = c.fetchone()
    
    for i in temp:
        if 'pre_a_code' == i and is_a:
            return True
        



@router.message(
    StateFilter(
        None,
        pre_sales_handler.Pre_Saling.leaving_e,
        pre_sales_handler.Pre_Saling.Paying.paying_comment,
        pre_sales_handler.Pre_CLientSaver,
        sales_handler.Saling.leaving_e,
        admin_handler.Pre_Add_Sales_Data
    ),
    Command("start")
)
async def cmd_start(message: types.Message, state: FSMContext):
    id = message.from_user.id


    await message.answer_photo(
        photo=photo1,
        caption=greetings_text,
        reply_markup=kbs.greetings_kb(id, pre_a_code(id))
    )

    await state.clear()

    await saving_func(id, message.answer, state)

    

@router.callback_query(
    StateFilter(
        None,
        pre_sales_handler.Pre_Saling.leaving_e,
        pre_sales_handler.Pre_CLientSaver,
        sales_handler.Saling.leaving_e
    ),
    F.data == 'greetings'
)
async def b_greetings(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=photo1,
            caption=greetings_text,
        ),
        reply_markup=kbs.greetings_kb(callback.from_user.id)
    )

    await state.clear()

    await saving_func(callback.from_user.id, callback.message.answer, state)



@router.callback_query(F.data == "author")
async def b_author(callback: types.CallbackQuery):
    text = '''\
–∞–≤—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—É—Ç ‚Äî>
üéÄ—Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª ‚Äî https://t.me/milisu_merch
üéÄ—Ç–∏–∫ —Ç–æ–∫ ‚Äî https://www.tiktok.com/@milisu_merch?_t=8qxJyBrRUzm&_r=1
üéÄ–≤–∫ ‚Äî https://vk.com/milisu_merch

–ø–æ–ª–∫–∏ –∞–≤—Ç–æ—Ä–∞ ‚Äî>
‚Ä¢ –ö–∞–∑–∞–Ω—å, –ë–∞—É–º–∞–Ω–∞ 82, —Ç—Ü –°–≤–∏—Ç–∞ –•–æ–ª–ª, 2 —ç—Ç–∞–∂ "–ü–æ–ª–∫–∞ –ß—É–¥–µ—Å" 11.2.3
‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –í–∞–π–Ω–µ—Ä–∞ 8, —Ç—Ü –ö—Ä–∞—Å–Ω—ã–π –õ–µ–æ–ø–∞—Ä–¥ 2 —ç—Ç–∞–∂ "–ü–æ–ª–∫–∞ –ß—É–¥–µ—Å" 40.5.1 [2 –∑–∞–ª]
‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç 17, 2 —ç—Ç–∞–∂ "–õ–∏—Å—å—è –ü–æ–ª–∫–∞" 10.1.2
‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø. 7 (–º–µ—Ç—Ä–æ –°–∞–¥–æ–≤–∞—è), "–ö—Ä–∞—Ñ—Ç–∏–ö–æ" 22.1 [–∫–∞—Ä—Ç–∞ –º–µ—Ä—á–∞: https://t.me/milisu_merch/1019?single ]
‚Ä¢ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –†–∞—à–ø–∏–ª–µ–≤—Å–∫–∞—è 17, "–ü–æ–ª–∫–∞ –ß—É–¥–µ—Å", 3.4.2
‚Ä¢ –ú–æ—Å–∫–≤—ã –ø–æ–∫–∞ –Ω–µ—Ç! –°—Ç–æ—é –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –Ω–µ—ë'''
    await callback.message.edit_caption(
        caption=text,
        reply_markup=kbs.back_to_greetings_kb()
    )

@router.callback_query(F.data == "messages")
async def b_messages_is_on(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'SELECT * FROM notification WHERE id = {user_id}')
        
        if c.fetchone() is None:
            c.execute(f'INSERT INTO notification (id) VALUES ({user_id})')

    await callback.message.edit_caption(
        caption='''\
–≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä–≤—ã–º–∏!

‚ú®Ô∏è –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å ! ‚ú®Ô∏è''',
        reply_markup=kbs.back_to_greetings_from_messages_is_on_kb()
    )

@router.callback_query(F.data == "messages_off")
async def b_messages_is_off(callback: types.CallbackQuery):
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'DELETE FROM notification WHERE id = {callback.from_user.id}')

    await callback.message.edit_caption(
        caption='''\
–≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–æ–≤

‚ú®Ô∏è –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å ! ‚ú®Ô∏è''',
        reply_markup=kbs.back_to_greetings_from_messages_is_off_kb()
    )

@router.callback_query(pre_sales_handler.Pre_CLientSaver.need_help, F.data == 'deny_help')
async def deny_help(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='–≤—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É?',
        reply_markup=kbs.save2()
    )

    await state.set_state(pre_sales_handler.Pre_CLientSaver.need_help_check)

    await callback.answer()

@router.callback_query(pre_sales_handler.Pre_CLientSaver.need_help_check, F.data == 'deny_help2')
async def deny_help2(callback: types.CallbackQuery, state: FSMContext):
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute('SELECT name FROM sqlite_master WHERE type="table" AND name LIKE "pay%" ORDER BY name')
        temp = c.fetchall()
        user_id = callback.from_user.id
        for i in temp:
            if str(user_id) in i[0]:
                c.execute(f'DROP TABLE IF EXISTS {i[0]}')
                c.execute(f'DROP TABLE IF EXISTS pre_customer_{user_id}')

                break
    
    await callback.message.answer(
        text='–æ–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start',
        reply_markup=kbs.back_to_greetings_kb()
    )

    await state.clear()
    await callback.answer()

#----------–ê–í–ò–¢–û--------------
class Message_For_Pre_A(StatesGroup):
    text = State()

@router.callback_query(F.data == 'send_pre_a_code')
async def send_pre_a_code(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        text='–≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—é–¥–∞, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ—Ä—É'
    )
    await state.set_state(Message_For_Pre_A.text)

@router.message(Message_For_Pre_A.text, F.text != "/start")
async def send_pre_a_code_2(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    code = message.text
    user_name = message.from_user.username
    if user_name is None:
        user_name = '*—é–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*'
    else:
        user_name = '@' + user_name
    text = f'''\
#–∫–æ–¥_–∞–≤–∏—Ç–æ
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}
–Æ–∑–µ—Ä–Ω–µ–π–º: {user_name}
id: {message.from_user.id}
–ö–æ–¥: <code>{code}</code>'''

    r = 1295442952
    try:
        await bot.send_message(chat_id=r, text=text, parse_mode=ParseMode.HTML)
    except TelegramRetryAfter as e:
        sleep(e.retry_after)
        await bot.send_message(chat_id=r, text=text, parse_mode=ParseMode.HTML)


    await message.answer(
        text=f'–≤–∞—à –∫–æ–¥: {code}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        reply_markup=kbs.back_to_greetings_kb
    )

