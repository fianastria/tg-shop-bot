import sqlite3

from aiogram import Router, F
from aiogram import types
from keyboards import kbs, sales_kbs
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.filters.command import Command
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest

from filters import is_admin

from datetime import datetime

from uuid import uuid4
from config_reader import config
from yoomoney import Client, Quickpay

from handlers import admin_handler


pre_sales_router = Router()
photo2 = config.photo2
photo3 = config.photo3



class Pre_Saling(StatesGroup):
    choosing_e = State()
    choosing = State()

    shipping = State()

    leaving = State()
    leaving_e = State()

    class y_go(StatesGroup):
        y_notification = State()
        y_adress = State()
        y_contact = State()

    class rf(StatesGroup):
        rf_notification = State()
        rf_adress = State()
        rf_name = State()
        rf_contact = State()

    class av(StatesGroup):
        av_check = State()

    class Paying(StatesGroup):
        paying_1 = State()
        paying_comment = State()

#–°–¢–≠–ô–¢–´ –î–õ–Ø –°–ü–ê–°–ï–ù–ò–Ø
class Pre_CLientSaver(StatesGroup):
    need_help = State()
    need_help_check = State()





#-------------------------------–æ—Ç–º–µ–Ω–∞ –∏ –≤—ã—Ö–æ–¥----------------
@pre_sales_router.callback_query(Pre_Saling.choosing, F.data == 'finish')
async def finish(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()    
        c.execute(f'''DROP TABLE IF EXISTS payment_{user_id}''')
        c.execute(f'''DROP TABLE IF EXISTS pre_customer_{user_id}''')

    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=photo3,
            caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n—Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª—è—Ç—Å—è! ü•∫'
        ),
        reply_markup=sales_kbs.leaving_check()
    )
    await state.set_state(Pre_Saling.leaving)

@pre_sales_router.message(
    ~StateFilter(Pre_Saling.choosing_e),
    StateFilter(Pre_Saling.Paying.paying_1, Pre_Saling.leaving),
    F.text.casefold() == '–æ—Ç–º–µ–Ω–∞'
)
@pre_sales_router.message(
    ~StateFilter(Pre_Saling.choosing_e),
    StateFilter(Pre_Saling.Paying.paying_1, Pre_Saling.leaving),
    Command("start")
)
async def cmd_start_during_saling(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo=photo3,
        caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?\n–µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã ü•∫',
        reply_markup=sales_kbs.leaving_check('check_payment')
    )
    
    await state.set_state(Pre_Saling.leaving)


@pre_sales_router.message(
    ~StateFilter(Pre_Saling.choosing_e),
    StateFilter(Pre_Saling),
    F.text.casefold() == '–æ—Ç–º–µ–Ω–∞'
)
@pre_sales_router.message(
    ~StateFilter(Pre_Saling.choosing_e),
    StateFilter(Pre_Saling),
    Command("start")
)
async def cmd_start_after_saling(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        
        c.execute(f'''DROP TABLE IF EXISTS pre_customer_{user_id}''')

    await message.answer_photo(
        photo=photo3,
        caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n—Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª—è—Ç—Å—è! ü•∫',
        reply_markup=sales_kbs.leaving_check()
    )
    
    await state.set_state(Pre_Saling.leaving)

@pre_sales_router.callback_query(Pre_Saling.leaving, F.data == 'clear')
async def clear(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''DROP TABLE IF EXISTS pre_customer_{user_id}''')
        c.execute(f'''DROP TABLE IF EXISTS payment_{user_id}''')
        c.execute(f'''DROP TABLE IF EXISTS pre_basket_{user_id}''')
        c.execute(f'''DROP TABLE IF EXISTS pre_page_{user_id}''')
        

    await callback.message.edit_caption(
        caption='–∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖÔ∏è\n\n–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã\n/start',
        reply_markup=sales_kbs.leaving_check_2()
    )
    
    await state.clear()


@pre_sales_router.callback_query(Pre_Saling.choosing_e, F.data == 'finish')
async def finish_e(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=photo3,
            caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? ü•∫'
        ),
        reply_markup=sales_kbs.leaving_check_e()
    )

    await state.set_state(Pre_Saling.leaving_e)

@pre_sales_router.message(Pre_Saling.choosing_e, Command('start'))
async def finish_e_cmd(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo=photo3,
        caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? ü•∫',
        reply_markup=sales_kbs.leaving_check_e()
    )

    await state.set_state(Pre_Saling.leaving_e)
        
#---------------–í–´–ë–û–† –¢–û–í–ê–†–û–í--------------------------

def make_closing_date():
    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        c.execute('''SELECT * FROM pre_sales_closing_date''')
        temp = c.fetchone()[0].split('_')

    ymd = [int(i) for i in temp[0].split('-')]
    hm = [int(i) for i in temp[1].split(':')]
    closing_date = datetime(year=ymd[2], month=ymd[1], day=ymd[0], hour=hm[0], minute=hm[1])
    
    return closing_date

def make_text(positions, starts_with, basket_text = ''):
    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        positions_text = ''
        for i in range(starts_with, starts_with + positions):
            c.execute(f'''SELECT * FROM pre_product_list WHERE position = {i}''')
            position_data = c.fetchone()
            #(1, '–ö–æ—Ç—è—Ç–∞', 0, 200)
            positions_text += f'\n{position_data[0]}. {position_data[1]} - {position_data[-1]}—Ä—É–±.'
        

    text = f'''\
‚ú®Ô∏è –ø—Ä–µ–¥-–∑–∞–∫–∞–∑—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–æ {make_closing_date().strftime("%d.%m.%Y %H:%M")}! ‚ú®Ô∏è
''' + positions_text + basket_text
    return text


def make_basket_text(basket):
    if len(basket) == 0:
        basket_text = ''
    else:
        
        basket_text = '\n\n–ö–æ—Ä–∑–∏–Ω–∞:'
        basket_summ = 0

        for i in basket:
            #(position, name, count, is_paper, price)
            basket_text += f'\n{i[0]}. {i[1]} - {i[2]}—à—Ç. - {i[2] * i[4]}—Ä—É–±.'
            basket_summ += i[2] * i[4]

        basket_text += f'\n–ò—Ç–æ–≥–æ: {basket_summ}—Ä—É–±.'
    
    return basket_text


async def is_basket_empty(state, basket):
    if len(basket) != 0:
        await state.set_state(Pre_Saling.choosing)
    else:
        await state.set_state(Pre_Saling.choosing_e)


async def basket_is_huge(callback, state):
    await callback.answer(
        text='''\
–≤–∞—à –∑–∞–∫–∞–∑ –¢–ê–ö–û–ô –±–æ–ª—å—à–æ–π, —á—Ç–æ –±–æ—Ç —Å –Ω–∏–º –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è ÔΩ•ÔæüÔæüÔΩ•(ÔºèœâÔºº)ÔΩ•ÔæüÔæüÔΩ•

–Ω–∞–ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É, –æ–Ω —Å–∞–º –ø—Ä–∏–º–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑ !‚ô°‚ô° @milisuuuu''',
        show_alert=True
    )

    await callback.message.answer(
        text='''\
‚¨ÜÔ∏è–≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤—ã—à–µ‚¨ÜÔ∏è

—Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º: @milisuuuu''',
        reply_markup=sales_kbs.leaving_check_2()
    )

    user_id = callback.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''DROP TABLE pre_basket_{user_id}''')
        c.execute(f'''DROP TABLE pre_page_{user_id}''')
    await state.clear()


@pre_sales_router.callback_query(F.data == "pre_sales")
async def sales_start(callback: types.CallbackQuery, state: FSMContext):
    if admin_handler.pre_sales_status and datetime.today() <= make_closing_date():
        basket = []
        await is_basket_empty(state=state, basket=basket)

            
        with sqlite3.connect("main.db") as connection:
            
            c = connection.cursor()

            user_id = callback.from_user.id
            c.execute(f'''CREATE TABLE IF NOT EXISTS pre_basket_{user_id}
            (position INT UNIQUE,
            name TEXT,
            count INT,
            is_paper INT,
            price INT)''')
            c.execute(f'''DROP TABLE IF EXISTS pre_page_{user_id}''')
            c.execute(f'''CREATE TABLE IF NOT EXISTS pre_page_{user_id} (page INT)''')
            c.execute(f'''INSERT INTO pre_page_{user_id} (page) VALUES (1)''')

            c.execute('''SELECT * FROM pre_pages WHERE page = 1''')
            page_data = c.fetchone()
            
            

        await callback.message.edit_media(
            types.InputMediaPhoto(
                media=page_data[1],
                caption=make_text(page_data[-2], page_data[-1]),
                parse_mode=ParseMode.HTML
            ),
            reply_markup=sales_kbs.sales_processing(basket=basket, pre='pre_')
        )
    
    else:
        await callback.message.edit_media(
            types.InputMediaPhoto(
                media=photo2,
                caption="–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–µ–¥ –∑–∞–∫–∞–∑—ã –∑–∞–∫—Ä—ã—Ç—ã :(\n–ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö - —Ö—Ö.—Ö—Ö"
            ),
            reply_markup=kbs.back_to_greetings_kb()
        )


@pre_sales_router.callback_query(
    StateFilter(
        Pre_Saling.choosing,
        Pre_Saling.choosing_e,
        Pre_Saling.leaving,
        Pre_Saling.leaving_e,
        Pre_Saling.shipping
    ),
    F.data.startswith('page_')
)
async def sales_specific_page(callback: types.CallbackQuery, state: FSMContext):
    try:
        page_number = int(callback.data.split('_')[1])
        user_id = callback.from_user.id

        

        with sqlite3.connect("main.db") as connection:
            c = connection.cursor()

            c.execute(f'''SELECT * FROM pre_basket_{user_id} ORDER BY position''')
            basket = c.fetchall()
            await is_basket_empty(state=state, basket=basket)
            c.execute(f'''UPDATE pre_page_{user_id} SET page = {page_number} WHERE page = page''')

            
            c.execute(f'''SELECT * FROM pre_pages WHERE page = {page_number}''')
            page_data = c.fetchone()
            
        await callback.message.edit_media(
            types.InputMediaPhoto(
                media=page_data[1],
                caption=make_text(page_data[-2], page_data[-1], make_basket_text(basket)),
                parse_mode=ParseMode.HTML
            ),
            reply_markup=sales_kbs.sales_processing(basket=basket, page=page_number, pre='pre_')
        )
    
    except TelegramBadRequest:
        await basket_is_huge(callback=callback, state=state)



@pre_sales_router.callback_query(
    StateFilter(
        Pre_Saling.choosing,
        Pre_Saling.choosing_e,
        Pre_Saling.leaving,
        Pre_Saling.leaving_e,
        Pre_Saling.shipping
    ),
    F.data.startswith('position_')
)
async def add_to_basket(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_choice = callback.data.split('_')[1]
        user_id = callback.from_user.id

        with sqlite3.connect("main.db") as connection:
            c = connection.cursor()
            c.execute(f'''SELECT * FROM pre_product_list WHERE position = {user_choice}''')
            position_data = c.fetchone()
            c.execute(f'''SELECT EXISTS(SELECT position FROM pre_basket_{user_id} WHERE position = {position_data[0]})''')
            if c.fetchone()[0]:
                c.execute(f'''UPDATE pre_basket_{user_id} SET count = count + 1 WHERE position = {position_data[0]}''')
            else:
                c.execute(f'''INSERT INTO pre_basket_{user_id} (position, name, count, is_paper, price)
                VALUES
                    ({position_data[0]},
                    '{position_data[1]}',
                    1,
                    {position_data[2]},
                    {position_data[3]})''')
            
            c.execute(f'''SELECT * FROM pre_basket_{user_id} ORDER BY position''')
            basket = c.fetchall()

            c.execute(f'''SELECT * FROM pre_page_{user_id}''')
            page_number = c.fetchone()[0]

            c.execute(f'''SELECT * FROM pre_pages WHERE page = {page_number}''')
            page_data = c.fetchone()
#(1, '–ö–æ—Ç—è—Ç–∞', 0, 200) –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ, –±—É–º–∞–∂–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç, —Ü–µ–Ω–∞  
        

        await callback.message.edit_caption(
            caption=make_text(page_data[-2], page_data[-1], make_basket_text(basket)),
            parse_mode=ParseMode.HTML,
            reply_markup=sales_kbs.sales_processing(basket=basket, page=page_data[0], pre='pre_')
        )
        await state.set_state(Pre_Saling.choosing)
    
    except TelegramBadRequest:
        await basket_is_huge(callback=callback, state=state)



#------------------–ó–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò –ü–û–ö–£–ü–ö–ê----------------------


def contact_taking(message):
    if message.contact is None:
        contact = message.text
    else:
        contact = message.contact.phone_number
    
    if contact[0] == '7':
        contact = '8' + contact[1:]
    elif contact[:2] == '+7':
        contact = '8' + contact[2:]
    
    return contact

def is_letter(basket):
    #(position, name, count, is_paper, price)
    for i in basket:
        if not i[3]:
            return False
    return True



def shipping_price(shipping):
    if shipping == '–Ø–Ω–¥–µ–∫—ÅGo':
        price = 350
    
    elif shipping == '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ (–ü–ò–°–¨–ú–û)':
        price = 180

    elif shipping == '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ (–ü–û–°–´–õ–ö–ê)':    
        price = 400
    
    else:
        price = 0

    return price

contact_inc_text = '''\
‚ùå –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ ‚ùå

—É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

–º–æ–∂–µ—Ç–µ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 89991112233), –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ'''


@pre_sales_router.callback_query(StateFilter(Pre_Saling), F.data == 'go_to_purcase')
async def go_to_purcase(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_name = callback.from_user.username
    if user_name is None:
        user_name = '*—é–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*'
    else:
        user_name = '@' + user_name

    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''DROP TABLE IF EXISTS pre_customer_{user_id}''')
        c.execute(f'''CREATE TABLE pre_customer_{user_id}
        (id INT,
        username TEXT,
        full_name TEXT,
        shipping TEXT,
        adress TEXT,
        contact TEXT,
        price INT,
        comment TEXT,
        goods TEXT)''')
        c.execute(f'''INSERT INTO pre_customer_{user_id}
        (id,
        username,
        full_name,
        shipping,
        adress,
        contact,
        price,
        comment,
        goods)
        VALUES
            ({user_id},
            '{user_name}',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-',
            '-')''')
     
    await state.set_state(Pre_Saling.shipping)
    await callback.message.answer(
        text='''\
üéÄ –æ—Ç–ª–∏—á–Ω–æ, –∑–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã –Ω–∏–∂–µ üéÄ

–ø—Ä–∏–º–∏—á–∞–Ω–∏–µ: –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚ú®Ô∏è –ø–æ—Å—ã–ª–∫–∏ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ ‚Äî 4–û–û—Ä
‚ú®Ô∏è –ø–∏—Å—å–º–∞ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ ‚Äî 18–û—Ä
‚ú®Ô∏è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ø–Ω–¥–µ–∫—ÅGo ‚Äî 35–û—Ä
‚ú®Ô∏è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ ‚Äî –æ—Ç 3–û –¥–æ 15–û—Ä''',
        reply_markup=sales_kbs.choosing_shipping()
    )
    await callback.answer()


@pre_sales_router.callback_query(Pre_Saling.shipping, F.data == 'y_notification')
async def y_notification(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='''\
–≤–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è
–ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—ÅGo, <b>–æ—á–µ–Ω—å –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ</b> —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω—ë–º !
—ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–¥—ë—Ç

–Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å, –°–ú–° —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ –ø—Ä–∏–¥–µ—Ç –≤–∞–º –Ω–∞ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> !

–∫–æ–¥—ã –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —è –Ω–µ –±—É–¥—É —Ä–∞—Å—Å—ã–ª–∞—Ç—å –≤ —Ä—É—á–Ω—É—éüôèüèº

–≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ü–í–ó?''',
        parse_mode=ParseMode.HTML,
        reply_markup=sales_kbs.y_notification_kb()
    )
    await state.set_state(Pre_Saling.y_go.y_notification)
    await callback.answer()

@pre_sales_router.callback_query(Pre_Saling.y_go.y_notification, F.data == 'y_go')
async def yandex_adress(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''UPDATE pre_customer_{user_id} SET shipping = "–Ø–Ω–¥–µ–∫—ÅGo"''')


    await state.update_data(shipping='–Ø–Ω–¥–µ–∫—ÅGo')
    
    await callback.message.answer(
        text='''\
‚ú®Ô∏è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—ã–ª–∫–∏ ‚ú®Ô∏è
–Ω–∞–∑–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å –ü–í–ó –Ø–Ω–¥–µ–∫—Å–∞ (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞) –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É? 

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 4, —Å—Ç—Ä. 1''',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()
    await state.set_state(Pre_Saling.y_go.y_adress)


@pre_sales_router.message(Pre_Saling.y_go.y_adress, F.text)
async def yandex_contact(message: types.Message, state: FSMContext):
    try:
        text = message.text
        user_id = message.from_user.id
        with sqlite3.connect('main.db') as connection:
            c = connection.cursor()
            c.execute(f'''UPDATE pre_customer_{user_id} SET adress = "{text}"''')

        await state.update_data(adress=text)
        await message.answer(
            text='''\
‚ú®Ô∏è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ú®Ô∏è

–º–æ–∂–µ—Ç–µ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 89991112233), –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ''',
            reply_markup=sales_kbs.give_contact()
        )
        await state.set_state(Pre_Saling.y_go.y_contact)
    except Exception:
        await message.answer(
            text='''\
‚ùå –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ ‚ùå

–Ω–∞–∑–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å –ü–í–ó –Ø–Ω–¥–µ–∫—Å–∞ (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞) –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É? 

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 4, —Å—Ç—Ä. 1''',
        )

@pre_sales_router.message(Pre_Saling.y_go.y_contact, F.contact)
@pre_sales_router.message(Pre_Saling.y_go.y_contact, F.text)
async def yandex_check(message: types.Message, state: FSMContext):
    try:
        contact = contact_taking(message)
        user_id = message.from_user.id
        with sqlite3.connect('main.db') as connection:
            c = connection.cursor()
            c.execute(f'''UPDATE pre_customer_{user_id} SET contact = "{contact}"''')

        await state.update_data(contact = contact)
        await state.update_data(name='-')
        user_data = await state.get_data()
        await message.answer(
            text=f'''\
üéÄ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:

–∞–¥—Ä–µ—Å –ü–í–ó –Ø–Ω–¥–µ–∫—Å–∞: {user_data['adress']}
–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['contact']}

–≤–µ—Ä–Ω–æ?''', 
            reply_markup=sales_kbs.y_check()
        )
    
    except Exception:
        await message.answer(
            text=contact_inc_text,
            reply_markup=sales_kbs.give_contact()
        )
    

#-------------

@pre_sales_router.callback_query(Pre_Saling.shipping, F.data == 'rf_notification')
async def rf_notification(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='''\
–≤–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è
–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É —Ä–æ—Å—Å–∏–∏, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç <b>–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</b>‚ÄºÔ∏è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏". —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –≥—É–≥–ª –ø–ª—ç–π –∏ –∞–ø—Å—Ç–æ—Ä

—ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ —Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ, —á—Ç–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä [–∫–æ–¥, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞] –≤–∞–º <b>–ø—Ä–∏–¥—ë—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b> ! —Ä–∞—Å—Å—ã–ª–∞—Ç—å –∏—Ö –ª–∏—á–Ω–æ —è –Ω–µ –±—É–¥—É—Ç !!

–≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ü–í–ó?''',
        parse_mode=ParseMode.HTML,
        reply_markup=sales_kbs.rf_notification_kb()
    )
    await state.set_state(Pre_Saling.rf.rf_notification)
    await callback.answer()


@pre_sales_router.callback_query(Pre_Saling.rf.rf_notification, F.data == 'rf')
async def rf_adress(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''SELECT * FROM pre_basket_{user_id}''')
        basket = c.fetchall()

        if is_letter(basket):
            text = '(–ü–ò–°–¨–ú–û)'
        else:
            text = '(–ü–û–°–´–õ–ö–ê)'

        shipping_text = '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ ' + text
        c.execute(f'''UPDATE pre_customer_{user_id} SET shipping = "{shipping_text}"''')


    await state.update_data(shipping=shipping_text)
    await callback.message.answer(
        text='''\
‚ú®Ô∏è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—ã–ª–∫–∏ ‚ú®Ô∏è
–Ω–∞–∑–æ–≤–∏—Ç–µ –ü–û–õ–ù–´–ô (–≤–∫–ª—é—á–∞—è –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å) –∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 9–∞, —Å—Ç—Ä–æ–µ–Ω–∏–µ 5–∞, –∏–Ω–¥–µ–∫—Å: 125009'''
    )
    await callback.answer()
    await state.set_state(Pre_Saling.rf.rf_adress)

@pre_sales_router.message(Pre_Saling.rf.rf_adress, F.text)
async def rf_name(message: types.Message, state: FSMContext):
    try:
        text = message.text
        user_id = message.from_user.id
        with sqlite3.connect('main.db') as connection:
            c = connection.cursor()
            c.execute(f'''UPDATE pre_customer_{user_id} SET adress = "{text}"''')

        await state.update_data(adress=message.text)
        await message.answer(
            text='''\
‚ú®Ô∏è —É–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–ò–û ‚ú®Ô∏è

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–°—Ç—Ä–µ–ª—å—Ü–æ–≤ –ò–≤–∞–Ω –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á''',
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(Pre_Saling.rf.rf_name)
    
    except Exception:
        await message.answer(
        text='''\
‚ùå –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ ‚ùå

–Ω–∞–∑–æ–≤–∏—Ç–µ –ü–û–õ–ù–´–ô (–≤–∫–ª—é—á–∞—è –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å) –∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 9–∞, —Å—Ç—Ä–æ–µ–Ω–∏–µ 5–∞, –∏–Ω–¥–µ–∫—Å: 125009'''
        )

@pre_sales_router.message(Pre_Saling.rf.rf_name, F.text)
async def rf_contact(message: types.Message, state: FSMContext):
    try:
        text = message.text
        user_id = message.from_user.id
        with sqlite3.connect('main.db') as connection:
            c = connection.cursor()
            c.execute(f'''UPDATE pre_customer_{user_id} SET full_name = "{text}"''')

        await state.update_data(name=text)
        await message.answer(
            text='''\
‚ú®Ô∏è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ú®Ô∏è

–º–æ–∂–µ—Ç–µ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 89991112233), –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ''',
            reply_markup=sales_kbs.give_contact()
        )
        await state.set_state(Pre_Saling.rf.rf_contact)

    except Exception:
        await message.answer(
            text='''\
‚ùå –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ ‚ùå

—É–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–ò–û 

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–°—Ç—Ä–µ–ª—å—Ü–æ–≤ –ò–≤–∞–Ω –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á'''
        )



@pre_sales_router.message(Pre_Saling.rf.rf_contact, F.contact)
@pre_sales_router.message(Pre_Saling.rf.rf_contact, F.text)
async def rf_check(message: types.Message, state: FSMContext):
    try:
        contact = contact_taking(message)
        user_id = message.from_user.id
        with sqlite3.connect('main.db') as connection:
            c = connection.cursor()
            c.execute(f'''UPDATE pre_customer_{user_id} SET contact = "{contact}"''')

        await state.update_data(contact = contact)
        user_data = await state.get_data()
        await message.answer(
            text=f'''\
üéÄ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:

–∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏: {user_data['adress']}
–≤–∞—à–∏ –§–ò–û: {user_data['name']}
–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['contact']}

–≤–µ—Ä–Ω–æ?''',
            reply_markup=sales_kbs.y_check()
        )

    except Exception:
        await message.answer(
            text=contact_inc_text,
            reply_markup=sales_kbs.give_contact()
        )
    

#-------------------------------------
@pre_sales_router.callback_query(Pre_Saling.shipping, F.data == 'av')
async def av_info(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Pre_Saling.av.av_check)
    user_id = callback.from_user.id
    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''UPDATE pre_customer_{user_id} SET shipping = "–ê–≤–∏—Ç–æ"''')

    await state.update_data(shipping='–ê–≤–∏—Ç–æ')
    await state.update_data(adress='-')
    await state.update_data(name='-')
    await state.update_data(contact='-')
    await callback.message.answer(
        text='''\
‚ùó‚ùó‚ùó–æ–ø–ª–∞—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä –Ω–∞—á–Ω—ë—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã!
–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ä–æ–∫ –æ—Ç 15 –¥–æ 40 –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. 
üéÄ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ê–≤–∏—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –≤–∞—à–∞ –ê–≤–∏—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å.
–ø–æ–∫–∞ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ù–ï –Ω—É–∂–Ω–æ.''',
        reply_markup=sales_kbs.av_check()
    )

    await callback.answer()
    

#---------------–û–ü–õ–ê–¢–ê-------------

client = Client(config.kassa_token.get_secret_value())
receiver = config.receiver.get_secret_value()

def basket_sum(basket):
    b_sum = 0

    for i in basket:
        b_sum += i[0] * i[1]
    
    return b_sum
    

@pre_sales_router.callback_query(
    StateFilter(
        Pre_Saling.y_go.y_contact,
        Pre_Saling.rf.rf_contact,
        Pre_Saling.av.av_check
    ),
    F.data == 'paying'
)
async def y_paying(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Pre_Saling.Paying.paying_1)
    user_id = callback.from_user.id
    label = str(uuid4())
    print('label =', label)
    user_data = await state.get_data()

    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''CREATE TABLE IF NOT EXISTS payment_{user_id}
        (label TEXT,
        url TEXT,
        sum INT)''')
        

        c.execute(f'''SELECT count, price FROM pre_basket_{user_id}''')
        basket = c.fetchall()

        whole_sum = basket_sum(basket) + shipping_price(user_data['shipping'])

        quickpay = Quickpay(
            receiver=receiver,
            quickpay_form='shop',
            targets=f'–ø–æ–∫—É–ø–∫–∞ –º–µ—Ä—á–∞ –Ω–∞ —Å—É–º–º—É {whole_sum}',
            paymentType='SB',
            sum = whole_sum,
            label=label
        )

        url_to_pay = quickpay.base_url

        c.execute(f'''INSERT INTO payment_{user_id} (label, url, sum)
        VALUES
            ("{label}",
            "{url_to_pay}",
            {whole_sum})''')
    
    await callback.message.answer(
        text = f'–∫ –æ–ø–ª–∞—Ç–µ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {whole_sum}\n\nüéÄ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ üéÄ',
        reply_markup=sales_kbs.paying_kb_1(url_to_pay)
    )

    await callback.answer()



@pre_sales_router.callback_query(
    StateFilter(
        Pre_Saling.Paying.paying_1,
        Pre_Saling.leaving,
        Pre_CLientSaver.need_help
    ),
    F.data == 'check_payment'
)
async def check_paiment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id

    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''SELECT * FROM payment_{user_id}''')
        payment_data = c.fetchone()

    history = client.operation_history(label=payment_data[0])
    for operation in history.operations:
        if operation.status == 'success':
            try:
                goods = '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:'
                

                with sqlite3.connect('main.db') as connection:
                    c = connection.cursor()
                    c.execute(f'''SELECT * FROM pre_basket_{user_id} ORDER BY position''')
                    basket = c.fetchall()

                    for i in basket:
                        #(position, name, count, is_paper, price)

                        goods += f'\n{i[0]}. {i[1]} - {i[2]}—à—Ç.'
                    
                    c.execute(f"""UPDATE pre_customer_{user_id} SET goods = '{goods}', price = {payment_data[2]}""")

                    c.execute(f'''INSERT INTO pre_sales_data (id, username, full_name, shipping, adress, contact, price, comment, goods)
                    SELECT * FROM pre_customer_{user_id}''')

                    c.execute(f'''DROP TABLE pre_basket_{user_id}''')
                    c.execute(f'''DROP TABLE pre_page_{user_id}''')
                    c.execute(f'''DROP TABLE payment_{user_id}''')
                    c.execute(f'''DROP TABLE pre_customer_{user_id}''')
                    
                await callback.message.answer(
                    text= '''\
–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞‚úÖÔ∏è

–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—é–¥–∞.

–µ—Å–ª–∏ –≤–∞–º –Ω–µ—á–µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ -'''
                )
                
                await state.set_state(Pre_Saling.Paying.paying_comment)
                return
            
            except Exception:
                await callback.message.answer(
                    text='''\
–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞‚úÖÔ∏è

‚ùå –Ω–æ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã —Å –æ—à–∏–±–∫–æ–π –∏ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ùå

–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º: @milisuuuu'''
                )
                await state.clear()

                with sqlite3.connect('main.db') as connection:
                    c = connection.cursor()
                    c.execute(f'''DROP TABLE IF EXISTS pre_basket_{user_id}''')
                    c.execute(f'''DROP TABLE IF EXISTS pre_page_{user_id}''')
                    c.execute(f'''DROP TABLE IF EXISTS payment_{user_id}''')
                    c.execute(f'''DROP TABLE IF EXISTS pre_customer_{user_id}''')

                return

    await state.set_state(Pre_Saling.Paying.paying_1)
    await callback.message.answer(
        text='–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ ‚ùå',
        reply_markup=sales_kbs.paying_kb_1(payment_data[1])
    )

@pre_sales_router.message(Pre_Saling.Paying.paying_comment, F.text != '/start')
async def commenting(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_comment = message.text

    with sqlite3.connect('main.db') as connection:
        c = connection.cursor()
        c.execute(f'''UPDATE pre_sales_data SET comment = '{user_comment}' WHERE id = {user_id}''')
    
    text = '''\
–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞‚úÖÔ∏è

–∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–µ—Å—å –º–µ—Ä—á! —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 –¥–æ 40 –¥–Ω–µ–π

–ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ —É –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –ª–∏—á–Ω–æ: @milisuuuu

–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚Äî> https://t.me/milisu_merch/111

üéÄ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üéÄ'''

    await state.clear()

    await message.answer(
        text=text,
        reply_markup=sales_kbs.leaving_check_2()
    )


@pre_sales_router.callback_query(StateFilter(None), F.data == 'check_payment')
async def unable_to_check(callback: types.CallbackQuery):
    await callback.answer(
        text='''\
—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
—ç—Ç–æ –∏–Ω–æ–≥–¥–∞ —Å–ª—É—á–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏ –æ–ø–ª–∞—Ç—É —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.

–µ—Å–ª–∏ –≤—ã –°–û–í–ï–†–®–ò–õ–ò –æ–ø–ª–∞—Ç—É, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
–≤–∞–º –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –æ–∫–Ω–æ –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã''',
        show_alert=True
    )

#–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±—ã—á–Ω–æ –∫–æ–≥–¥–∞ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è, –∞ —á–µ–ª –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
