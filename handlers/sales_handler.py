import sqlite3

from aiogram import Router, F
from aiogram import types
from keyboards import kbs, sales_kbs
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.filters.command import Command
from aiogram.enums import ParseMode

from datetime import datetime

from uuid import uuid4
from config_reader import config
from yoomoney import Client, Quickpay

from handlers import admin_handler


sales_router = Router()
#product_list [(1, '–ö–æ—Ç—è—Ç–∞', 6, 200), (2, '–†–∞–∑–±–∏—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ –≤–æ–¥–∫–∏', 1, 10), (3, '–ö–∞–∫–∞–æ –≤ –±–∞–Ω–∫–µ', 4, 160), (4, '–ö–∞–∫–∞–æ —É—Ç–∫–∞', 3, 70), (5, '–ó–µ–ª–µ–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞', 9, 100)]
#pages [(1, 'AgACAgIAAxkBAAOYZ5PyoaDg-7-8-mztadU7qeyHsKEAAhnqMRvx8aBIwuQdsuzi5KQBAAMCAAN5AAM2BA', 2, 1),
#      (2, 'AgACAgIAAxkBAAICB2eb1xDMGbaoFJt5927X0VLf7z6ZAAKc6zEbz5TYSJC6dLYhe8gUAQADAgADeQADNgQ', 3, 3)]
photo2 = config.photo2
photo3 = config.photo3

basket = dict()


class Saling(StatesGroup):
    choosing_e = State()
    choosing = State()

    shipping = State()

    leaving = State()
    leaving_e = State()

    class y_go(StatesGroup):
        y_notification = State()
        y_adress = State()
        y_contact = State()

    class rf(StatesGroup):
        rf_notification = State()
        rf_adress = State()
        rf_name = State()
        rf_contact = State()

    class av(StatesGroup):
        av_check = State()

    class Paying(StatesGroup):
        paying_1 = State()


def make_closing_date():
    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        c.execute('''SELECT * FROM sales_closing_date''')
        temp = c.fetchone()[0].split('_')

    ymd = [int(i) for i in temp[0].split('-')]
    hm = [int(i) for i in temp[1].split(':')]
    closing_date = datetime(year=ymd[2], month=ymd[1], day=ymd[0], hour=hm[0], minute=hm[1])
    
    return closing_date

def make_text(positions, starts_with, basket_text = ''):
    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        positions_text = ''
        for i in range(starts_with, starts_with + positions):
            c.execute(f'''SELECT * FROM product_list WHERE position = {i}''')
            position_data = c.fetchone()
            #(1, '–ö–æ—Ç—è—Ç–∞', 0, 0, 200)

            if position_data[-2] != 0:
                positions_text += f'\n{position_data[0]}. {position_data[1]} - {position_data[-1]}—Ä—É–±.'
            else:
                positions_text += f'\n{position_data[0]}. {position_data[1]} - –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ :('
        

    text = f'''\
‚ú®Ô∏è–æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–æ {make_closing_date().strftime("%d.%m.%Y %H:%M")}!‚ú®Ô∏è

‚Ä¢ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ <b>–Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π</b>, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏, –∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å –≤—ã–±–æ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ "<b>–≥–æ—Ç–æ–≤–æ</b>"
‚Ä¢ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å, –Ω–∞–∂–∏–º–∞—è "<b>–¥–∞–ª–µ–µ</b>" –∏ "<b>–Ω–∞–∑–∞–¥</b>"

–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:\
''' + positions_text + basket_text
    return text


def make_basket_text():
    if len(basket) == 0:
        basket_text = ''
    else:
        #(1, '–ö–æ—Ç—è—Ç–∞', 0, 6, 200) –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ, –±—É–º–∞–∂–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç, –∫–æ–ª-–≤–æ., —Ü–µ–Ω–∞
        basket_text = '\n\n–ö–æ—Ä–∑–∏–Ω–∞:'
        basket_summ = 0
        for i in basket:
            with sqlite3.connect("main.db") as connection:
                c = connection.cursor()
                c.execute(f'''SELECT * FROM product_list WHERE name = "{i}"''')
                position_data = c.fetchall()[0]
            basket_text += f'\n{i} - {basket[i]}—à—Ç. - {position_data[-1] * basket[i]}—Ä—É–±.'
            basket_summ += position_data[-1] * basket[i]
        basket_text += f'\n–ò—Ç–æ–≥–æ: {basket_summ}—Ä—É–±.'
    
    return basket_text



#-------------------------------–æ—Ç–º–µ–Ω–∞ –∏ –≤—ã—Ö–æ–¥----------------
@sales_router.callback_query(Saling.choosing, F.data == 'finish')
async def finish(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=photo3,
            caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n—Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª—è—Ç—Å—è! ü•∫'
        ),
        reply_markup=sales_kbs.leaving_check()
    )
    await state.set_state(Saling.leaving)

@sales_router.message(
    ~StateFilter(Saling.choosing_e),
    StateFilter(Saling),
    F.text.casefold() == '–æ—Ç–º–µ–Ω–∞'
)
@sales_router.message(
    ~StateFilter(Saling.choosing_e),
    StateFilter(Saling),
    Command('start')
)
async def cmd_start_after_saling(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo=photo3,
        caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n—Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª—è—Ç—Å—è! ü•∫',
        reply_markup=sales_kbs.leaving_check()
    )
    await state.set_state(Saling.leaving)

@sales_router.callback_query(Saling.leaving, F.data == 'clear')
async def clear(callback: types.CallbackQuery, state: FSMContext):
    global basket

    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        for i in basket:
            c.execute(f'''SELECT count FROM product_list WHERE name = "{i}"''')
            new_count = c.fetchone()[0] + basket[i]
            c.execute(f'''UPDATE product_list SET count = {new_count} WHERE name = "{i}"''')
    
    await callback.message.edit_caption(
        caption='–∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖÔ∏è\n\n–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã\n/start',
        reply_markup=sales_kbs.leaving_check_2()
    )
    basket.clear()
    await state.clear()


@sales_router.callback_query(Saling.choosing_e, F.data == 'finish')
async def finish_e(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=photo3,
            caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? ü•∫'
        ),
        reply_markup=sales_kbs.leaving_check_e()
    )

    await state.set_state(Saling.leaving_e)

@sales_router.message(Saling.choosing_e, Command('start'))
async def finish_e_cmd(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo=photo3,
        caption='–≤—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? ü•∫',
        reply_markup=sales_kbs.leaving_check_e()
    )

    await state.set_state(Saling.leaving_e)
        
#---------------–≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞--------------------------

async def is_basket_empty(state):
    if len(basket) != 0:
        await state.set_state(Saling.choosing)
    else:
        await state.set_state(Saling.choosing_e)


@sales_router.callback_query(F.data == "sales")
async def sales_start(callback: types.CallbackQuery, state: FSMContext):
    if admin_handler.sales_status and datetime.today() <= make_closing_date():
        await is_basket_empty(state=state)

            
        with sqlite3.connect("main.db") as connection:
            global page_data
            c = connection.cursor()
            c.execute('''SELECT * FROM pages WHERE page = 1''')
            page_data = c.fetchone()
        await callback.message.edit_media(
            types.InputMediaPhoto(
                media=page_data[1],
                caption=make_text(page_data[-2], page_data[-1], make_basket_text()),
                parse_mode=ParseMode.HTML
            ),
            reply_markup=sales_kbs.sales_processing(basket=basket)
        )
    
    else:
        await callback.message.edit_media(
            types.InputMediaPhoto(
                media=photo2,
                caption="–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã –∑–∞–∫—Ä—ã—Ç—ã :(\n–ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö - —Ö—Ö.—Ö—Ö"
            ),
            reply_markup=kbs.back_to_greetings_kb()
        )

@sales_router.callback_query(
    StateFilter(
        Saling.choosing,
        Saling.choosing_e,
        Saling.leaving,
        Saling.leaving_e,
        Saling.shipping
    ),
    F.data.startswith('page_')
)
async def sales_specific_page(callback: types.CallbackQuery, state: FSMContext):
    global page_data
    page_number = callback.data.split('_')[1]

    await is_basket_empty(state=state)

    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        c.execute(f'''SELECT * FROM pages WHERE page = {page_number}''')
        page_data = c.fetchone()
        
    await callback.message.edit_media(
        types.InputMediaPhoto(
            media=page_data[1],
            caption=make_text(page_data[-2], page_data[-1], make_basket_text()),
            parse_mode=ParseMode.HTML
        ),
        reply_markup=sales_kbs.sales_processing(basket=basket, page=page_data[0])
    )

@sales_router.callback_query(
    StateFilter(
        Saling.choosing,
        Saling.choosing_e,
        Saling.leaving,
        Saling.leaving_e,
        Saling.shipping
    ),
    F.data.startswith('position_')
)
async def add_to_basket(callback: types.CallbackQuery, state: FSMContext):
    global basket
    user_choice = callback.data.split('_')[1]

    with sqlite3.connect("main.db") as connection:
        c = connection.cursor()
        c.execute(f'''SELECT * FROM product_list WHERE position = {user_choice}''')
        position_data = c.fetchone()

    #(1, '–ö–æ—Ç—è—Ç–∞', 0, 6, 200) –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ, –±—É–º–∞–∂–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç, –∫–æ–ª-–≤–æ., —Ü–µ–Ω–∞
        if position_data[-2] != 0:
            c.execute(f'''UPDATE product_list SET count = {position_data[-2] - 1} WHERE position = {user_choice}''')

        else:
            await callback.answer(
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.",
                show_alert=True
            )
            return
        
    if position_data[1] in basket:
        basket[position_data[1]] += 1
    else:
        basket[position_data[1]] = 1

    await callback.message.edit_caption(
        caption=make_text(page_data[-2], page_data[-1], make_basket_text()),
        parse_mode=ParseMode.HTML,
        reply_markup=sales_kbs.sales_processing(basket=basket, page=page_data[0])
    )
    await state.set_state(Saling.choosing)

#------------------–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫—É–ø–∫–∞----------------------
def contact_taking(message):
    if message.contact is None:
        contact = message.text
    else:
        contact = message.contact.phone_number
    
    if contact[0] == '7':
        contact = '8' + contact[1:]
    elif contact[:2] == '+7':
        contact = '8' + contact[2:]
    
    return contact

def is_letter():
    for i in basket:
        with sqlite3.connect('main.db') as connection:
            c = connection.cursor()
            c.execute(f'SELECT is_paper FROM product_list WHERE name = "{i}"')
            is_paper = c.fetchone()[0]
        if not is_paper:
            return False

    return True

def shipping_price(shipping):
    if shipping == '–Ø–Ω–¥–µ–∫—ÅGo':
        price = 350
    
    elif shipping == '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ (–ü–ò–°–¨–ú–û)':
        price = 180

    elif shipping == '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ (–ü–û–°–´–õ–ö–ê)':    
        price = 400
    
    else:
        price = 0

    return price


@sales_router.callback_query(StateFilter(Saling), F.data == 'go_to_purcase')
async def go_to_purcase(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Saling.shipping)
    await callback.message.answer(
        text='''\
üéÄ –æ—Ç–ª–∏—á–Ω–æ, –∑–∞–∫–∞–∑ —Å–æ–±—Ä–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã –Ω–∏–∂–µ üéÄ

–ø—Ä–∏–º–∏—á–∞–Ω–∏–µ: –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚ú®Ô∏è –ø–æ—Å—ã–ª–∫–∏ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ ‚Äî 4–û–û—Ä
‚ú®Ô∏è –ø–∏—Å—å–º–∞ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ ‚Äî 18–û—Ä
‚ú®Ô∏è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ø–Ω–¥–µ–∫—ÅGo ‚Äî 35–û—Ä
‚ú®Ô∏è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ ‚Äî –æ—Ç 3–û –¥–æ 15–û—Ä''',
        reply_markup=sales_kbs.choosing_shipping()
    )
    await callback.answer()


@sales_router.callback_query(Saling.shipping, F.data == 'y_notification')
async def y_notification(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='''\
–≤–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è
–ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—ÅGo, <b>–æ—á–µ–Ω—å –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ</b> —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω—ë–º !
—ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–∏–¥—ë—Ç

–Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∏—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å, –°–ú–° —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ –ø—Ä–∏–¥–µ—Ç –≤–∞–º –Ω–∞ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> !

–∫–æ–¥—ã –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —è –Ω–µ –±—É–¥—É —Ä–∞—Å—Å—ã–ª–∞—Ç—å –≤ —Ä—É—á–Ω—É—éüôèüèº

–≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ü–í–ó?''',
        parse_mode=ParseMode.HTML,
        reply_markup=sales_kbs.y_notification_kb()
    )
    await state.set_state(Saling.y_go.y_notification)
    await callback.answer()

@sales_router.callback_query(Saling.y_go.y_notification, F.data == 'y_go')
async def yandex_adress(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(shipping='–Ø–Ω–¥–µ–∫—ÅGo')
    await callback.message.answer(
        text='''\
‚ú®Ô∏è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—ã–ª–∫–∏ ‚ú®Ô∏è
–Ω–∞–∑–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å –ü–í–ó –Ø–Ω–¥–µ–∫—Å–∞ (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç–∞) –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É? 

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞, —É–ª. –ê—Ä–±–∞—Ç, –¥. 4, —Å—Ç—Ä. 1''',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()
    await state.set_state(Saling.y_go.y_adress)

@sales_router.message(Saling.y_go.y_adress, F.text)
async def yandex_contact(message: types.Message, state: FSMContext):
    await state.update_data(adress=message.text)
    await message.answer(
        text='''\
‚ú®Ô∏è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ú®Ô∏è

–º–æ–∂–µ—Ç–µ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 89991112233), –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ''',
        reply_markup=sales_kbs.give_contact()
    )
    await state.set_state(Saling.y_go.y_contact)

@sales_router.message(Saling.y_go.y_contact, F.contact)
@sales_router.message(Saling.y_go.y_contact, F.text)
async def yandex_check(message: types.Message, state: FSMContext):

    await state.update_data(contact = contact_taking(message))
    await state.update_data(name='-')
    user_data = await state.get_data()
    await message.answer(
        text=f'''\
üéÄ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:

–∞–¥—Ä–µ—Å –ü–í–ó –Ø–Ω–¥–µ–∫—Å–∞: {user_data['adress']}
–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['contact']}

–≤–µ—Ä–Ω–æ?''', 
        reply_markup=sales_kbs.y_check()
    )
    

#-------------

@sales_router.callback_query(Saling.shipping, F.data == 'rf_notification')
async def rf_notification(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text='''\
–≤–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è
–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É —Ä–æ—Å—Å–∏–∏, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç <b>–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</b>‚ÄºÔ∏è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏". —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ –≥—É–≥–ª –ø–ª—ç–π –∏ –∞–ø—Å—Ç–æ—Ä

—ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ —Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ, —á—Ç–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä [–∫–æ–¥, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞] –≤–∞–º <b>–ø—Ä–∏–¥—ë—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</b> ! —Ä–∞—Å—Å—ã–ª–∞—Ç—å –∏—Ö –ª–∏—á–Ω–æ —è –Ω–µ –±—É–¥—É—Ç !!

–≥–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –ü–í–ó?''',
        parse_mode=ParseMode.HTML,
        reply_markup=sales_kbs.rf_notification_kb()
    )
    await state.set_state(Saling.rf.rf_notification)
    await callback.answer()


@sales_router.callback_query(Saling.rf.rf_notification, F.data == 'rf')
async def rf_adress(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(shipping='–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏')
    await callback.message.answer(
        text='''\
‚ú®Ô∏è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—ã–ª–∫–∏ ‚ú®Ô∏è
–Ω–∞–∑–æ–≤–∏—Ç–µ –ü–û–õ–ù–´–ô (–≤–∫–ª—é—á–∞—è –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å) –∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ –≥–¥–µ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 9–∞, —Å—Ç—Ä–æ–µ–Ω–∏–µ 5–∞, –∏–Ω–¥–µ–∫—Å: 125009'''
    )
    await callback.answer()
    await state.set_state(Saling.rf.rf_adress)

@sales_router.message(Saling.rf.rf_adress, F.text)
async def rf_name(message: types.Message, state: FSMContext):
    await state.update_data(adress=message.text)
    await message.answer(
        text='''\
‚ú®Ô∏è —É–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –§–ò–û ‚ú®Ô∏è

–Ω–∞–ø—Ä–∏–º–µ—Ä:
–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á''',
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Saling.rf.rf_name)

@sales_router.message(Saling.rf.rf_name, F.text)
async def rf_contact(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        text='''\
‚ú®Ô∏è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ú®Ô∏è

–º–æ–∂–µ—Ç–µ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 89991112233), –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ —Ç–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ''',
        reply_markup=sales_kbs.give_contact()
    )
    await state.set_state(Saling.rf.rf_contact)


@sales_router.message(Saling.rf.rf_contact, F.contact)
@sales_router.message(Saling.rf.rf_contact, F.text)
async def rf_check(message: types.Message, state: FSMContext):

    await state.update_data(contact = contact_taking(message))
    user_data = await state.get_data()
    await message.answer(
        text=f'''\
üéÄ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:

–∞–¥—Ä–µ—Å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏: {user_data['adress']}
–≤–∞—à–∏ –§–ò–û: {user_data['name']}
–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['contact']}

–≤–µ—Ä–Ω–æ?''', 
        reply_markup=sales_kbs.y_check()
    )
    

#-------------------------------------
@sales_router.callback_query(Saling.shipping, F.data == 'av')
async def av_info(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Saling.av.av_check)
    await state.update_data(shipping='–ê–≤–∏—Ç–æ')
    await state.update_data(adress='-')
    await state.update_data(name='-')
    await state.update_data(contact='-')
    await callback.message.answer(
        text='''\
‚ùó‚ùó‚ùó–æ–ø–ª–∞—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä –Ω–∞—á–Ω—ë—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã!
–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ä–æ–∫ –æ—Ç 15 –¥–æ 40 –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. 
üéÄ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ê–≤–∏—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –≤–∞—à–∞ –ê–≤–∏—Ç–æ-–¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å.
–ø–æ–∫–∞ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ù–ï –Ω—É–∂–Ω–æ.''',
        reply_markup=sales_kbs.av_check()
    )

    await callback.answer()
    

#---------------–û–ü–õ–ê–¢–ê-------------

client = Client(config.kassa_token.get_secret_value())
receiver = config.receiver.get_secret_value()

def basket_sum():
    b_sum = 0
    for i in basket:
        with sqlite3.connect("main.db") as connection:
            c = connection.cursor()
            c.execute(f'''SELECT price FROM product_list WHERE name = "{i}"''')
            price = c.fetchone()[0]
        b_sum += price * basket[i]
    
    return b_sum
    

@sales_router.callback_query(
    StateFilter(
        Saling.y_go.y_contact,
        Saling.rf.rf_contact,
        Saling.av.av_check
    ),
    F.data == 'paying'
)
async def y_paying(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Paying.paying_1)
    global label, whole_sum, url_to_pay
    label = str(uuid4())
    user_data = await state.get_data()

    print('label =', label)
    whole_sum = basket_sum() + shipping_price(user_data['shipping'])

    quickpay = Quickpay(
        receiver=receiver,
        quickpay_form='shop',
        targets=f'–ø–æ–∫—É–ø–∫–∞ –º–µ—Ä—á–∞ –Ω–∞ —Å—É–º–º—É: {whole_sum}',
        paymentType='SB',
        sum = 2,
        label=label
    )

    url_to_pay = quickpay.base_url
    await callback.message.answer(
        text = f'–∫ –æ–ø–ª–∞—Ç–µ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {whole_sum}\n\nüéÄ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ üéÄ',
        reply_markup=sales_kbs.paying_kb_1(url_to_pay)
    )

@sales_router.callback_query(Saling.Paying.paying_1, F.data == 'check_paiment')
async def check_paiment(callback: types.CallbackQuery, state: FSMContext):
    global basket

    history = client.operation_history(label=label)
    for operation in history.operations:
        if operation.status == 'success':
            user_data = await state.get_data()
            user_id = callback.from_user.id
            user_name = callback.from_user.first_name
            goods = '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:'
            for i in basket:
                goods += f'\n{i} - {basket[i]}—à—Ç.'

            with sqlite3.connect('main.db') as connection:
                c = connection.cursor()
                c.execute(f'''INSERT INTO sales_data (id, username, full_name, shipping, adress, contact, price, goods)
                VALUES
                    ({user_id},
                    "{user_name}",
                    "{user_data['name']}",
                    "{user_data['shipping']}",
                    "{user_data['adress']}",
                    "{user_data['contact']}",
                    {whole_sum},
                    "{goods}")''')
                
            await callback.message.answer(
                text= '''\
–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞‚úÖÔ∏è

–∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤–∞–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–µ—Å—å –º–µ—Ä—á! —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 –¥–æ 40 –¥–Ω–µ–π

–ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ —É –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –ª–∏—á–Ω–æ: @milisuuuu

–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ ‚Äî> https://t.me/milisu_merch/111

üéÄ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üéÄ''',
                reply_markup=sales_kbs.leaving_check_2())
            
            await state.clear()
            basket.clear()
            return
        
    await callback.message.answer(
        text='–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ ‚ùå',
        reply_markup=sales_kbs.paying_kb_1(url_to_pay)
    )